/* tslint:disable */
/* eslint-disable */
/**
 * Kinnema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiAuthLoginPost200Response
 */
export interface ApiAuthLoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPost200Response
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPost200Response
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ApiAuthLoginPostRequest
 */
export interface ApiAuthLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiAuthRegisterPostRequest
 */
export interface ApiAuthRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthRegisterPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthRegisterPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthRegisterPostRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ApiLastWatchedGet200ResponseInner
 */
export interface ApiLastWatchedGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'poster_path': string;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'episode': number;
    /**
     * 
     * @type {boolean}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'userId': string;
    /**
     * 
     * @type {ApiAuthLoginPost200Response}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'user'?: ApiAuthLoginPost200Response;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedGet200ResponseInner
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface ApiLastWatchedIdPatch200Response
 */
export interface ApiLastWatchedIdPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'episode': number;
    /**
     * 
     * @type {boolean}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'poster_path': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedIdPatch200Response
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface ApiLastWatchedIdPatchRequest
 */
export interface ApiLastWatchedIdPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'season'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'episode'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'tmdbId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'poster_path': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedIdPatchRequest
     */
    'atSecond'?: number | null;
}
/**
 * 
 * @export
 * @interface ApiLastWatchedPost200Response
 */
export interface ApiLastWatchedPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPost200Response
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedPost200Response
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedPost200Response
     */
    'episode': number;
    /**
     * 
     * @type {boolean}
     * @memberof ApiLastWatchedPost200Response
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPost200Response
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPost200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPost200Response
     */
    'poster_path': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedPost200Response
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface ApiLastWatchedPostRequest
 */
export interface ApiLastWatchedPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedPostRequest
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedPostRequest
     */
    'episode': number;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPostRequest
     */
    'poster_path': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiLastWatchedPostRequest
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPostRequest
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLastWatchedPostRequest
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof ApiLastWatchedPostRequest
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface Def1
 */
export interface Def1 {
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface Def10
 */
export interface Def10 {
    /**
     * 
     * @type {number}
     * @memberof Def10
     */
    'season'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Def10
     */
    'episode'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Def10
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Def10
     */
    'tmdbId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Def10
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Def10
     */
    'poster_path': string;
    /**
     * 
     * @type {string}
     * @memberof Def10
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Def10
     */
    'atSecond'?: number | null;
}
/**
 * 
 * @export
 * @interface Def2
 */
export interface Def2 {
    /**
     * 
     * @type {string}
     * @memberof Def2
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Def2
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Def3
 */
export interface Def3 {
    /**
     * 
     * @type {string}
     * @memberof Def3
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def3
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Def3
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface Def5
 */
export interface Def5 {
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'poster_path': string;
    /**
     * 
     * @type {number}
     * @memberof Def5
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof Def5
     */
    'episode': number;
    /**
     * 
     * @type {boolean}
     * @memberof Def5
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'userId': string;
    /**
     * 
     * @type {UserSchema}
     * @memberof Def5
     */
    'user'?: UserSchema;
    /**
     * 
     * @type {number}
     * @memberof Def5
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface Def6
 */
export interface Def6 {
    /**
     * 
     * @type {string}
     * @memberof Def6
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def6
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Def6
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface Def7
 */
export interface Def7 {
    /**
     * 
     * @type {string}
     * @memberof Def7
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Def7
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof Def7
     */
    'episode': number;
    /**
     * 
     * @type {boolean}
     * @memberof Def7
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Def7
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof Def7
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Def7
     */
    'poster_path': string;
    /**
     * 
     * @type {string}
     * @memberof Def7
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof Def7
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface Def8
 */
export interface Def8 {
    /**
     * 
     * @type {number}
     * @memberof Def8
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof Def8
     */
    'episode': number;
    /**
     * 
     * @type {string}
     * @memberof Def8
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Def8
     */
    'poster_path': string;
    /**
     * 
     * @type {boolean}
     * @memberof Def8
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Def8
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof Def8
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof Def8
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface Def9
 */
export interface Def9 {
    /**
     * 
     * @type {string}
     * @memberof Def9
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Def9
     */
    'season': number;
    /**
     * 
     * @type {number}
     * @memberof Def9
     */
    'episode': number;
    /**
     * 
     * @type {boolean}
     * @memberof Def9
     */
    'isWatched'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Def9
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Def9
     */
    'poster_path': string;
    /**
     * 
     * @type {string}
     * @memberof Def9
     */
    'tmdbId': string;
    /**
     * 
     * @type {string}
     * @memberof Def9
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof Def9
     */
    'atSecond': number;
}
/**
 * 
 * @export
 * @interface UserSchema
 */
export interface UserSchema {
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'email': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiAuthLoginPost', 'apiAuthLoginPostRequest', apiAuthLoginPostRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAuthRegisterPostRequest' is not null or undefined
            assertParamExists('apiAuthRegisterPost', 'apiAuthRegisterPostRequest', apiAuthRegisterPostRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAuthRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/last_watched/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id last watched id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLastWatchedIdGet', 'id', id)
            const localVarPath = `/api/last_watched/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ApiLastWatchedIdPatchRequest} apiLastWatchedIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedIdPatch: async (id: number, apiLastWatchedIdPatchRequest: ApiLastWatchedIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLastWatchedIdPatch', 'id', id)
            // verify required parameter 'apiLastWatchedIdPatchRequest' is not null or undefined
            assertParamExists('apiLastWatchedIdPatch', 'apiLastWatchedIdPatchRequest', apiLastWatchedIdPatchRequest)
            const localVarPath = `/api/last_watched/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiLastWatchedIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiLastWatchedPostRequest} apiLastWatchedPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedPost: async (apiLastWatchedPostRequest: ApiLastWatchedPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiLastWatchedPostRequest' is not null or undefined
            assertParamExists('apiLastWatchedPost', 'apiLastWatchedPostRequest', apiLastWatchedPostRequest)
            const localVarPath = `/api/last_watched/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiLastWatchedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(apiAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthLogoutDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(apiAuthRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLastWatchedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiLastWatchedGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLastWatchedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiLastWatchedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id last watched id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLastWatchedIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLastWatchedGet200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLastWatchedIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiLastWatchedIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ApiLastWatchedIdPatchRequest} apiLastWatchedIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLastWatchedIdPatch(id: number, apiLastWatchedIdPatchRequest: ApiLastWatchedIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLastWatchedIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLastWatchedIdPatch(id, apiLastWatchedIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiLastWatchedIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiLastWatchedPostRequest} apiLastWatchedPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLastWatchedPost(apiLastWatchedPostRequest: ApiLastWatchedPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLastWatchedPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLastWatchedPost(apiLastWatchedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiLastWatchedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthLoginPost200Response> {
            return localVarFp.apiAuthLoginPost(apiAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthRegisterPost(apiAuthRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiLastWatchedGet200ResponseInner>> {
            return localVarFp.apiLastWatchedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id last watched id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiLastWatchedGet200ResponseInner> {
            return localVarFp.apiLastWatchedIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ApiLastWatchedIdPatchRequest} apiLastWatchedIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedIdPatch(id: number, apiLastWatchedIdPatchRequest: ApiLastWatchedIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiLastWatchedIdPatch200Response> {
            return localVarFp.apiLastWatchedIdPatch(id, apiLastWatchedIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiLastWatchedPostRequest} apiLastWatchedPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLastWatchedPost(apiLastWatchedPostRequest: ApiLastWatchedPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiLastWatchedPost200Response> {
            return localVarFp.apiLastWatchedPost(apiLastWatchedPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthLoginPost(apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthLoginPost(apiAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthLogoutDelete(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthLogoutDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthRegisterPost(apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthRegisterPost(apiAuthRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiLastWatchedGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiLastWatchedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id last watched id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiLastWatchedIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiLastWatchedIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ApiLastWatchedIdPatchRequest} apiLastWatchedIdPatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiLastWatchedIdPatch(id: number, apiLastWatchedIdPatchRequest: ApiLastWatchedIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiLastWatchedIdPatch(id, apiLastWatchedIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiLastWatchedPostRequest} apiLastWatchedPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiLastWatchedPost(apiLastWatchedPostRequest: ApiLastWatchedPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiLastWatchedPost(apiLastWatchedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



