/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as PluginsRouteImport } from './routes/plugins'
import { Route as NotFoundRouteImport } from './routes/not-found'
import { Route as FavoritesRouteImport } from './routes/favorites'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as SettingsUpdatesRouteImport } from './routes/settings/updates'
import { Route as SettingsSubtitlesRouteImport } from './routes/settings/subtitles'
import { Route as SettingsLanguageRouteImport } from './routes/settings/language'
import { Route as RoomRoomIdRouteImport } from './routes/room.$roomId'
import { Route as CollectionNetworkRouteImport } from './routes/collection.$network'
import { Route as SettingsSyncIndexRouteImport } from './routes/settings/sync/index'
import { Route as SettingsExperimentalIndexRouteImport } from './routes/settings/experimental/index'
import { Route as SettingsSyncSetupRouteImport } from './routes/settings/sync/setup'
import { Route as SettingsSyncRelaysRouteImport } from './routes/settings/sync/relays'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const PluginsRoute = PluginsRouteImport.update({
  id: '/plugins',
  path: '/plugins',
  getParentRoute: () => rootRouteImport,
} as any)
const NotFoundRoute = NotFoundRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const FavoritesRoute = FavoritesRouteImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/_layout/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsUpdatesRoute = SettingsUpdatesRouteImport.update({
  id: '/settings/updates',
  path: '/settings/updates',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsSubtitlesRoute = SettingsSubtitlesRouteImport.update({
  id: '/settings/subtitles',
  path: '/settings/subtitles',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsLanguageRoute = SettingsLanguageRouteImport.update({
  id: '/settings/language',
  path: '/settings/language',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomRoomIdRoute = RoomRoomIdRouteImport.update({
  id: '/room/$roomId',
  path: '/room/$roomId',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionNetworkRoute = CollectionNetworkRouteImport.update({
  id: '/collection/$network',
  path: '/collection/$network',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsSyncIndexRoute = SettingsSyncIndexRouteImport.update({
  id: '/settings/sync/',
  path: '/settings/sync/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsExperimentalIndexRoute =
  SettingsExperimentalIndexRouteImport.update({
    id: '/settings/experimental/',
    path: '/settings/experimental/',
    getParentRoute: () => rootRouteImport,
  } as any)
const SettingsSyncSetupRoute = SettingsSyncSetupRouteImport.update({
  id: '/settings/sync/setup',
  path: '/settings/sync/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsSyncRelaysRoute = SettingsSyncRelaysRouteImport.update({
  id: '/settings/sync/relays',
  path: '/settings/sync/relays',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/favorites': typeof FavoritesRoute
  '/not-found': typeof NotFoundRoute
  '/plugins': typeof PluginsRoute
  '/search': typeof SearchRoute
  '/collection/$network': typeof CollectionNetworkRoute
  '/room/$roomId': typeof RoomRoomIdRoute
  '/settings/language': typeof SettingsLanguageRoute
  '/settings/subtitles': typeof SettingsSubtitlesRoute
  '/settings/updates': typeof SettingsUpdatesRoute
  '/': typeof LayoutIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/settings/sync/relays': typeof SettingsSyncRelaysRoute
  '/settings/sync/setup': typeof SettingsSyncSetupRoute
  '/settings/experimental': typeof SettingsExperimentalIndexRoute
  '/settings/sync': typeof SettingsSyncIndexRoute
}
export interface FileRoutesByTo {
  '/favorites': typeof FavoritesRoute
  '/not-found': typeof NotFoundRoute
  '/plugins': typeof PluginsRoute
  '/search': typeof SearchRoute
  '/collection/$network': typeof CollectionNetworkRoute
  '/room/$roomId': typeof RoomRoomIdRoute
  '/settings/language': typeof SettingsLanguageRoute
  '/settings/subtitles': typeof SettingsSubtitlesRoute
  '/settings/updates': typeof SettingsUpdatesRoute
  '/': typeof LayoutIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/settings/sync/relays': typeof SettingsSyncRelaysRoute
  '/settings/sync/setup': typeof SettingsSyncSetupRoute
  '/settings/experimental': typeof SettingsExperimentalIndexRoute
  '/settings/sync': typeof SettingsSyncIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/favorites': typeof FavoritesRoute
  '/not-found': typeof NotFoundRoute
  '/plugins': typeof PluginsRoute
  '/search': typeof SearchRoute
  '/collection/$network': typeof CollectionNetworkRoute
  '/room/$roomId': typeof RoomRoomIdRoute
  '/settings/language': typeof SettingsLanguageRoute
  '/settings/subtitles': typeof SettingsSubtitlesRoute
  '/settings/updates': typeof SettingsUpdatesRoute
  '/_layout/': typeof LayoutIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/settings/sync/relays': typeof SettingsSyncRelaysRoute
  '/settings/sync/setup': typeof SettingsSyncSetupRoute
  '/settings/experimental/': typeof SettingsExperimentalIndexRoute
  '/settings/sync/': typeof SettingsSyncIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/favorites'
    | '/not-found'
    | '/plugins'
    | '/search'
    | '/collection/$network'
    | '/room/$roomId'
    | '/settings/language'
    | '/settings/subtitles'
    | '/settings/updates'
    | '/'
    | '/settings'
    | '/settings/sync/relays'
    | '/settings/sync/setup'
    | '/settings/experimental'
    | '/settings/sync'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/favorites'
    | '/not-found'
    | '/plugins'
    | '/search'
    | '/collection/$network'
    | '/room/$roomId'
    | '/settings/language'
    | '/settings/subtitles'
    | '/settings/updates'
    | '/'
    | '/settings'
    | '/settings/sync/relays'
    | '/settings/sync/setup'
    | '/settings/experimental'
    | '/settings/sync'
  id:
    | '__root__'
    | '/favorites'
    | '/not-found'
    | '/plugins'
    | '/search'
    | '/collection/$network'
    | '/room/$roomId'
    | '/settings/language'
    | '/settings/subtitles'
    | '/settings/updates'
    | '/_layout/'
    | '/settings/'
    | '/settings/sync/relays'
    | '/settings/sync/setup'
    | '/settings/experimental/'
    | '/settings/sync/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  FavoritesRoute: typeof FavoritesRoute
  NotFoundRoute: typeof NotFoundRoute
  PluginsRoute: typeof PluginsRoute
  SearchRoute: typeof SearchRoute
  CollectionNetworkRoute: typeof CollectionNetworkRoute
  RoomRoomIdRoute: typeof RoomRoomIdRoute
  SettingsLanguageRoute: typeof SettingsLanguageRoute
  SettingsSubtitlesRoute: typeof SettingsSubtitlesRoute
  SettingsUpdatesRoute: typeof SettingsUpdatesRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  SettingsSyncRelaysRoute: typeof SettingsSyncRelaysRoute
  SettingsSyncSetupRoute: typeof SettingsSyncSetupRoute
  SettingsExperimentalIndexRoute: typeof SettingsExperimentalIndexRoute
  SettingsSyncIndexRoute: typeof SettingsSyncIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plugins': {
      id: '/plugins'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof PluginsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/updates': {
      id: '/settings/updates'
      path: '/settings/updates'
      fullPath: '/settings/updates'
      preLoaderRoute: typeof SettingsUpdatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/subtitles': {
      id: '/settings/subtitles'
      path: '/settings/subtitles'
      fullPath: '/settings/subtitles'
      preLoaderRoute: typeof SettingsSubtitlesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/language': {
      id: '/settings/language'
      path: '/settings/language'
      fullPath: '/settings/language'
      preLoaderRoute: typeof SettingsLanguageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room/$roomId': {
      id: '/room/$roomId'
      path: '/room/$roomId'
      fullPath: '/room/$roomId'
      preLoaderRoute: typeof RoomRoomIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collection/$network': {
      id: '/collection/$network'
      path: '/collection/$network'
      fullPath: '/collection/$network'
      preLoaderRoute: typeof CollectionNetworkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/sync/': {
      id: '/settings/sync/'
      path: '/settings/sync'
      fullPath: '/settings/sync'
      preLoaderRoute: typeof SettingsSyncIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/experimental/': {
      id: '/settings/experimental/'
      path: '/settings/experimental'
      fullPath: '/settings/experimental'
      preLoaderRoute: typeof SettingsExperimentalIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/sync/setup': {
      id: '/settings/sync/setup'
      path: '/settings/sync/setup'
      fullPath: '/settings/sync/setup'
      preLoaderRoute: typeof SettingsSyncSetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/sync/relays': {
      id: '/settings/sync/relays'
      path: '/settings/sync/relays'
      fullPath: '/settings/sync/relays'
      preLoaderRoute: typeof SettingsSyncRelaysRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  FavoritesRoute: FavoritesRoute,
  NotFoundRoute: NotFoundRoute,
  PluginsRoute: PluginsRoute,
  SearchRoute: SearchRoute,
  CollectionNetworkRoute: CollectionNetworkRoute,
  RoomRoomIdRoute: RoomRoomIdRoute,
  SettingsLanguageRoute: SettingsLanguageRoute,
  SettingsSubtitlesRoute: SettingsSubtitlesRoute,
  SettingsUpdatesRoute: SettingsUpdatesRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  SettingsSyncRelaysRoute: SettingsSyncRelaysRoute,
  SettingsSyncSetupRoute: SettingsSyncSetupRoute,
  SettingsExperimentalIndexRoute: SettingsExperimentalIndexRoute,
  SettingsSyncIndexRoute: SettingsSyncIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
